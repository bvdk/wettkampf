# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AgeClass {
  id: ID!
  name: String!
}

input AgeClassInput {
  name: String!
}

type Athlete {
  id: ID!
  eventId: ID!
  event: Event!
  athleteGroupId: ID
  athleteGroup: AthleteGroup
  slot: Slot
  importId: String
  firstName: String!
  lastName: String!
  name: String!
  gender: Gender!
  birthday: DateTime
  club: String
  norm: Boolean
  lateRegistration: Boolean
  price: String
  age: Int
  ageClassId: ID
  ageClass: AgeClass

  # Body weight in kg
  bodyWeight: Float
  weightClassId: ID
  weightClass: WeightClass

  # Attempt count
  attemptCount: Int!

  # Calc wilks
  wilks: Float
  los: Int
  points: Float
  total: Float
  place: Int
  location: String
  attempts(discipline: Discipline): [Attempt!]!
  nextAttempts(discipline: Discipline): [Attempt!]
  bestAttempts(discipline: Discipline): [Attempt!]
}

type AthleteGroup {
  id: ID!
  eventId: ID!
  slotId: ID
  slot: Slot
  name: String!
  gender: Gender
  ageClassId: ID
  ageClass: AgeClass
  weightClassId: ID
  weightClass: WeightClass
  athletes(sort: [SortInput!]): [Athlete!]!
  athleteCount: Int!
  shallow: Boolean!
}

enum AthleteGroupCreationKey {
  GENDER
  AGE_CLASS
  WEIGHT_CLASS
}

type AthleteGroupCreationResult {
  keys: [AthleteGroupCreationKey!]
  athletes: [Athlete!]!
  athleteGroups: [AthleteGroup!]!
}

input AthleteGroupInput {
  name: String
  gender: Gender
  ageClassId: ID
  weightClassId: ID
}

input AthleteInput {
  importId: String
  athleteGroupId: ID
  firstName: String
  lastName: String
  gender: Gender
  birthday: DateTime
  club: String
  norm: Boolean
  lateRegistration: Boolean
  price: String
  ageClassId: ID

  # Body weight in kg
  bodyWeight: Float
  weightClassId: String
  los: Int
}

input AthleteUpdateInput {
  importId: String
  athleteGroupId: ID
  firstName: String
  lastName: String
  gender: Gender
  birthday: DateTime
  club: String
  norm: Boolean
  lateRegistration: Boolean
  price: String
  ageClassId: ID

  # Body weight in kg
  bodyWeight: Float
  weightClassId: String
  los: Int
}

type Attempt {
  id: ID!
  weight: Float
  valid: Boolean!
  done: Boolean!
  date: DateTime!
  discipline: Discipline!
  index: Int!
}

input AttemptInput {
  weight: Float
  valid: Boolean
  done: Boolean
  date: DateTime
}

input AttemptUpdateInput {
  weight: Float
  valid: Boolean
  done: Boolean
  date: DateTime
}

enum ContestType {
  SINGLE
  TEAM
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

enum Discipline {
  BENCHPRESS
  SQUAT
  DEADLIFT
  POWERLIFTING
}

type Event {
  id: ID!
  name: String!
  discipline: Discipline
  availableDisciplines: [Discipline!]
  contestType: ContestType
  teamGender: Gender
  teamSize: Int
  groupOrder: [String!]
  currentDiscipline: Discipline
  slots: [Slot!]!
  athleteGroups: [AthleteGroup!]!

  # Athletes without valid group
  unsortedAthletes(filters: [FilterInput!]): [Athlete!]!
  athletes(filters: [FilterInput!]): [Athlete!]!
}

input EventInput {
  name: String
  discipline: Discipline
  contestType: ContestType
  teamGender: Gender
  teamSize: Int
  currentDiscipline: Discipline
}

input FilterInput {
  value: [String!]
  index: String!
}

enum Gender {
  MALE
  FEMALE
}

type Mutation {
  createAgeClass(data: AgeClassInput!): AgeClass!
  updateAgeClass(data: AgeClassInput!, id: ID!): AgeClass!
  deleteAgeClass(id: ID!): AgeClass!
  createAthlete(eventId: ID!, data: AthleteInput!): Athlete!
  updateAthlete(data: AthleteUpdateInput!, id: ID!): Athlete!
  deleteAthlete(id: ID!): Athlete!
  createWeightClass(data: WeightClassInput!): WeightClass!
  updateWeightClass(data: WeightClassInput!, id: ID!): WeightClass!
  deleteWeightClass(id: ID!): WeightClass!
  createAthleteGroup(eventId: ID!, slotId: ID, data: AthleteGroupInput!): AthleteGroup!
  updateAthleteGroup(data: AthleteGroupInput!, id: ID!): AthleteGroup!
  setAthleteGroupSlot(athleteGroupId: ID!, slotId: ID!): AthleteGroup!
  addAthletesToAthleteGroup(athleteGroupId: ID!, athleteIds: [ID!]!): AthleteGroup!
  deleteAthleteGroup(id: ID!): AthleteGroup!
  autoCreateAthleteGroups(
    # Wenn nicht gewählt werden alle Athleten ohne Startgruppe verwendet.
    athleteIds: [ID!]
    eventId: ID!
    keys: [AthleteGroupCreationKey!]!

    # Maximale Startgruppengröße, wenn 0 werden alle passenden Athleten in eine Gruppe gespeichert.
    maxGroupSize: Int

    # Wenn true werden bestehende Startgruppen mit einbezogen
    useExisting: Boolean

    # Gruppen auf bestehende Bühnen verteilen
    distributeSlots: Boolean
  ): AthleteGroupCreationResult!
  createSlot(eventId: ID!, data: SlotInput!): Slot!
  updateSlot(data: SlotInput!, id: ID!): Slot!
  deleteSlot(id: ID!): Slot!
  createEvent(data: EventInput!): Event!
  updateEvent(data: EventInput!, id: ID!): Event!
  deleteEvent(id: ID!): Event!
  createAttempt(athleteId: ID!, data: AttemptInput!, discipline: Discipline!): Attempt!
  updateAttempt(data: AttemptUpdateInput!, id: ID!): Attempt!
  deleteAttempt(id: ID!): Attempt!
  removeAllAttempts(id: ID!): Boolean!
  simulateAttempts(id: ID!): Boolean!
}

type Query {
  # All age classes
  ageClasses: [AgeClass!]!
  ageClass(id: ID!): AgeClass!
  athletes: [Athlete!]!
  athlete(id: ID!): Athlete!
  findAthlete(eventId: ID, importId: ID): Athlete!

  # All weight classes
  weightClasses: [WeightClass!]!
  weightClass(id: ID!): WeightClass!
  athleteGroup(id: ID!): AthleteGroup!
  autoCreateAthleteGroupsPreview(
    # Wenn nicht gewählt werden alle Athleten ohne Startgruppe verwendet.
    athleteIds: [ID!]
    eventId: ID!
    keys: [AthleteGroupCreationKey!]!

    # Maximale Startgruppengröße, wenn 0 werden alle passenden Athleten in eine Gruppe gespeichert.
    maxGroupSize: Int

    # Wenn true werden bestehende Startgruppen mit einbezogen
    useExisting: Boolean

    # Gruppen auf bestehende Bühnen verteilen
    distributeSlots: Boolean
  ): AthleteGroupCreationResult!

  # Get a slot
  slot(id: ID!): Slot

  # Get all the events
  events: [Event!]!

  # Get a event
  event(id: ID!): Event!
  attempt(id: ID!): Attempt!
}

type Slot {
  id: ID!
  name: String!
  event: Event!
  eventId: String!
  index: Int!
  athletes: [Athlete!]!
  athleteCount: Int!
  athleteGroups: [AthleteGroup!]!
}

input SlotInput {
  name: String
}

enum SortDirection {
  ASC
  DESC
}

input SortInput {
  name: String
  direction: SortDirection
}

type WeightClass {
  id: ID!
  name: String!
  min: Int!
  max: Int!
  gender: Gender
}

input WeightClassInput {
  name: String
  min: Int!
  max: Int!
  gender: Gender
}
