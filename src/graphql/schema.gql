# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AgeClass {
  id: ID!
  name: String!
}

type Athlete {
  id: ID!
  eventId: String!
  event: Event!
  slotId: String!
  slot: Slot!
  importId: String!
  firstName: String!
  lastName: String!
  gender: String!
  birthday: DateTime!
  club: String!
  norm: Boolean!
  lateRegistration: Boolean!
  price: String!
  ageClass: AgeClass!

  # Body weight in kg
  bodyWeight: Float!
  weightClass: WeightClass!

  # Attempt count
  attemptCount: Int!

  # Calc wilks
  wilks: Float!
  los: Int!
  points: Float!
  total: Float!
  place: Int!
  location: Int!
  attempts: [Attempt!]!
}

input AthleteInput {
  importId: String!
  firstName: String!
  lastName: String!
  gender: String!
  birthday: DateTime!
  club: String!
  norm: Boolean!
  lateRegistration: Boolean!
  price: String!
  ageClassId: String!

  # Body weight in kg
  bodyWeight: Float!
  weightClassId: String!

  # Attempt count
  attemptCount: Int!

  # Calc wilks
  wilks: Float!
  los: Int!
  points: Float!
  total: Float!
  place: Int!
  location: Int!
}

type Attempt {
  id: ID!
  weight: Float!
  valid: Boolean!
  done: Boolean!
  date: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Event {
  id: ID!
  name: String!
  discipline: String!
  contestType: String!
  teamGender: String!
  teamSize: Int!
  groupOrder: [String!]!
  currentDiscipline: String!
  slots: [Slot!]!
}

input EventInput {
  name: String!
  discipline: String!
  contestType: String!
  teamGender: String!
  teamSize: Int!
  currentDiscipline: String!
}

type Mutation {
  createAthlete(data: AthleteInput!): Athlete!
  updateAthlete(data: AthleteInput!, id: String!): Athlete!
  deleteAthlete(id: String!): Athlete!
  createEvent(data: EventInput!): Event!
  updateEvent(data: EventInput!, id: String!): Event!
  deleteEvent(id: String!): Event!
}

type Query {
  athletes: [Athlete!]!

  # Get a event
  event(id: String!): Event!

  # Get all the events
  events: [Event!]!
}

type Slot {
  id: ID!
  name: String!
  event: Event!
  eventId: String!
  index: Int!
  athletes: [Athlete!]!
}

type WeightClass {
  id: ID!
  name: String!
  gender: String!
}
